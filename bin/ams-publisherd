#!/usr/bin/env python

from argo_nagios_ams_publisher import config
from argo_nagios_ams_publisher import core
from argo_nagios_ams_publisher import log

import argparse
import daemon
import daemon.pidlockfile
import os
import sys
import signal
import psutil
import threading

conffile = '/etc/argo-nagios-ams-publisher/ams-publisher.conf'
pidfile = '/var/run/argo-nagios-ams-publisher/pid'

def daemon_start(context_daemon, logger, loghandle, events, confopts, restart=False):
    if context_daemon.pidfile.is_locked() and not \
            context_daemon.pidfile.i_am_locking():
        pid = context_daemon.pidfile.read_pid()
        try:
            process = psutil.Process(pid=pid)
            logger.info('Already running (%s)' % pid)
            return 0
        except psutil.NoSuchProcess:
            context_daemon.pidfile.break_lock()

    if loghandle:
        context_daemon.files_preserve = [loghandle]

    def sigtermhandle(signum, frame):
        logger.info('Received SIGTERM')
        events['term'].set()

    context_daemon.signal_map = {
        signal.SIGTERM: sigtermhandle
    }

    if not restart:
        logger.info('Started')

    context_daemon.open()
    with context_daemon:
        core.Run(conf=confopts, log=logger, ev=events)

def daemon_stop(context_daemon, logger, restart=False):
    if context_daemon.pidfile.is_locked():
        pid = context_daemon.pidfile.read_pid()

        try:
            process = psutil.Process(pid=pid)
        except psutil.NoSuchProcess:
            context_daemon.pidfile.break_lock()
            if not restart:
                logger.info('Not running - cleaning stale pidfile')
        else:
            if not restart:
                logger.info('Stopping (%s)' % pid)

            process.terminate()
            pgone, palive = psutil.wait_procs([process])

            for p in palive:
                p.kill()

    elif not restart:
        logger.info('Not running')

    return 0

def daemon_status(context_daemon, logger):
    if context_daemon.pidfile.is_locked() and not \
            context_daemon.pidfile.i_am_locking():
        pid = context_daemon.pidfile.read_pid()

        try:
            psutil.Process(pid=pid)
        except psutil.NoSuchProcess:
            logger.info('Not running - stale pidfile')
            return 1
        else:
            logger.info('Running (%s)' % pid)
            return 0
    else:
        logger.info('Not running')
        return 3

def main():
    lobj = log.Logger(sys.argv[0])
    logger = lobj.get()
    loghandle = None
    events = dict()

    termev = threading.Event()
    events.update({'term': termev})

    confopts = config.parse_config(conffile, logger)

    parser = argparse.ArgumentParser(prog='ams-publisherd')
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-n', dest='nofork', action='store_true',
                        help='do not fork into background')
    group.add_argument('-d', dest='daemon', type=str,
                       help='daemon arguments: start, stop, restart, status', metavar='')
    args = parser.parse_args()

    if args.nofork:
        try:
            core.Run(conf=confopts, log=logger, ev=events)
        except KeyboardInterrupt:
            raise SystemExit(1)

    elif args.daemon:
        context_daemon = daemon.DaemonContext()
        context_daemon.pidfile = daemon.pidlockfile.PIDLockFile(pidfile, threaded=False)

        if args.daemon == 'start':
            daemon_start(context_daemon, logger, loghandle, events, confopts)

        elif args.daemon == 'stop':
            ret = daemon_stop(context_daemon, logger)
            raise SystemExit(ret)

        elif args.daemon == 'restart':
            daemon_stop(context_daemon, logger, restart=True)
            daemon_start(context_daemon, logger, loghandle, events, confopts, restart=True)

        elif args.daemon == 'status':
            ret = daemon_status(context_daemon, logger)
            raise SystemExit(ret)

main()
