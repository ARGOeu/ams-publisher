#!/usr/bin/python3
import argparse
import multiprocessing
import pwd
import signal
import sys

from argo_nagios_ams_publisher.config import parse_config
from argo_nagios_ams_publisher.log import Logger
from argo_nagios_ams_publisher.run import init_dirq_consume
from argo_nagios_ams_publisher.stats import query_stats, setup_statssocket
from argo_nagios_ams_publisher.shared import Shared

LOGFILE = '/var/log/argo-nagios-ams-publisher/ams-publisher.log'


def get_userids(user):
    return pwd.getpwnam(user)[2], pwd.getpwnam(user)[3]


def main():
    """
       Function fetch arguments from command line, initialize logger,
       initialize singleton object that will hold configuration options,
       register SIGTERM and SIGUSR handlers and starts daemonizing the process.
       There is also option for no-daemonizing mainly for debugging purposes.

    """
    def sigterm_handler(*args):
        event = shared.event('term')
        event.set()

    def sigusr1_handler(*args):
        event = shared.event('usr1')
        event.set()

    lobj = Logger(sys.argv[0], LOGFILE)
    logger = lobj.get()

    shared = Shared()

    shared.add_log(logger)
    shared.add_event('term', multiprocessing.Event())
    shared.add_event('usr1', multiprocessing.Event())

    parser = argparse.ArgumentParser(prog='ams-publisherd')
    parser.add_argument('-q', dest='query', required=False, help='query for statistics for last n minutes',
                        nargs='?', type=int, metavar='number of minutes', const=180)
    args = parser.parse_args()

    signal.signal(signal.SIGTERM, sigterm_handler)
    signal.signal(signal.SIGUSR1, sigusr1_handler)

    if args.query:
        confopts = parse_config(shared.log)
        shared = Shared(confopts=confopts)
        shared.log.info('Asked for statistics for last %s minutes' % int(args.query))
        query_stats(args.query)
    else:
        try:
            confopts = parse_config()
            shared = Shared(confopts=confopts)
            uid, gid = get_userids(shared.general['runasuser'])
            sock = setup_statssocket(uid, gid)
            init_dirq_consume(shared.workers, daemonized=False, sockstat=sock)
        except KeyboardInterrupt:
            raise SystemExit(1)



main()
