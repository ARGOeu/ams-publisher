#!/usr/bin/python3

from argo_nagios_ams_publisher.config import parse_config
from argo_nagios_ams_publisher.log import Logger
from argo_nagios_ams_publisher.run import init_dirq_consume
from argo_nagios_ams_publisher.shared import Shared

from datetime import datetime

import argparse
import errno
import multiprocessing
import os
import pwd
import signal
import socket
import sys

logfile = '/var/log/argo-nagios-ams-publisher/ams-publisher.log'

shared = None
logger = None


def query_stats(last_minutes):
    def parse_result(query):
        try:
            w, r = query.split('+')

            w = w.split(':')[1]
            r = int(r.split(':')[1])

        except (ValueError, KeyError):
            return (w, 'error')

        return (w, r)

    maxcmdlength = 128
    query_consumed, query_published = '', ''

    for w in shared.workers:
        query_consumed += 'w:{0}+g:consumed{1} '.format(w, last_minutes)

    for w in shared.workers:
        query_published += 'w:{0}+g:published{1} '.format(w, last_minutes)

    try:
        sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        sock.setblocking(0)
        sock.settimeout(15)

        sock.connect(shared.general['statsocket'])
        sock.send(query_published, maxcmdlength)
        data = sock.recv(maxcmdlength)
        for answer in data.split():
            if answer.startswith('t:'):
                continue
            w, r = parse_result(answer)
            shared.log.info('worker:{0} published:{1}'.format(w, r))
        sock.close()

        sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        sock.setblocking(0)
        sock.settimeout(15)
        sock.connect(shared.general['statsocket'])
        sock.send(query_consumed, maxcmdlength)
        data = sock.recv(maxcmdlength)
        for answer in data.split(' '):
            if answer.startswith('t:'):
                continue
            w, r = parse_result(answer)
            shared.log.info('worker:{0} consumed:{1}'.format(w, r))
        sock.close()

    except socket.timeout as e:
        shared.log.error('Socket response timeout after 15s')

    except socket.error as e:
        shared.log.error('Socket error: {0}'.format(str(e)))

    finally:
        sock.close()


def setup_statssocket(path, uid, gid):
    global shared

    if os.path.exists(path):
        os.unlink(path)
    try:
        sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        sock.bind(path)
        os.chown(path, uid, gid)
    except socket.error as e:
        shared.log.error('Error setting up socket: %s - %s' % (path, str(e)))
        raise SystemExit(1)

    return sock


def get_userids(user):
    return pwd.getpwnam(user)[2], pwd.getpwnam(user)[3]


def pidfiledir(pidfile):
    try:
        dirp = os.path.dirname(pidfile)
        if not os.path.exists(dirp):
            os.makedirs(dirp)
        uid, gid = get_userids(shared.general['runasuser'])
        os.chown(dirp, uid, gid)
    except (OSError, IOError) as e:
        if e.args[0] != errno.EEXIST:
            shared.log.error('%s %s' % (os.strerror(e.args[0]), e.args[1]))
            raise SystemExit(1)


def main():
    """
       Function fetch arguments from command line, initialize logger,
       initialize singleton object that will hold configuration options,
       register SIGTERM and SIGUSR handlers and starts daemonizing the process.
       There is also option for no-daemonizing mainly for debugging purposes.

    """
    def sigterm_handler(signum, frame):
        ev = shared.event('term')
        ev.set()

    def sigusr1_handler(signum, frame):
        ev = shared.event('usr1')
        ev.set()

    lobj = Logger(sys.argv[0], logfile)
    logger = lobj.get()

    global shared
    shared = Shared()

    shared.add_log(logger)
    shared.add_event('term', multiprocessing.Event())
    shared.add_event('usr1', multiprocessing.Event())

    parser = argparse.ArgumentParser(prog='ams-publisherd')
    parser.add_argument('-q', dest='query', required=False, help='query for statistics for last n minutes',
                       nargs='?', type=int, metavar='number of minutes', const=180)
    args = parser.parse_args()

    signal.signal(signal.SIGTERM, sigterm_handler)
    signal.signal(signal.SIGUSR1, sigusr1_handler)

    if args.query:
        confopts = parse_config(shared.log)
        shared = Shared(confopts=confopts)
        shared.log.info('Asked for statistics for last %s minutes' % int(args.query))
        query_stats(args.query)
    else:
        try:
            confopts = parse_config()
            shared = Shared(confopts=confopts)
            uid, gid = get_userids(shared.general['runasuser'])
            sock = setup_statssocket(shared.general['statsocket'], uid, gid)
            init_dirq_consume(shared.workers, daemonized=False, sockstat=sock)
        except KeyboardInterrupt:
            raise SystemExit(1)



main()
